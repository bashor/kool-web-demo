<?xml version="1.0"?>
<help>
    <example>
        <name>Simplest version</name>
        <text>We declare a package-level function main which returns Unit and takes an Array of strings as a
            parameter.
            <br/>
            Note that semicolons are optional.
        </text>
        <args/>
	 <mode>java js</mode>
    </example>
    <example>
        <name>Reading a name from the command line</name>
        <text>Line 6 demonstrates
            <a href="http://confluence.jetbrains.net/display/Kotlin/Strings#Strings-Templates">string templates</a>
            and <a href="http://confluence.jetbrains.net/display/Kotlin/Basic+types#Basictypes-Arrays">array access</a>.
        </text>
        <args>guest</args>
        <mode>java js</mode>
    </example>
    <example>
        <name>Reading many names from the command line</name>
        <text>Line 2 demonstrates the
            <a href="http://confluence.jetbrains.net/display/Kotlin/Control+structures#Controlstructures-Forloop">
                <b>for</b>-loop</a>
            , that would have been called "enhanced" if there were any other for-loop in Kotlin.
        </text>
        <args>guest1 guest2 guest3</args>
        <mode>java js</mode>
    </example>
    <example>
        <name>An object-oriented Hello</name>
        <text>Here we have a
            <a href="http://confluence.jetbrains.net/display/Kotlin/Classes+and+Inheritance">class</a>
            with a
            <i>primary constructor</i>
            and a member function.
            <br/>
            Note that there's no
            <b>new</b>
            keyword used to create an object.
        </text>
        <args>guest1</args>
        <mode>java js</mode>
    </example>
    <example>
        <name>A multi-language Hello</name>
        <text>In this example,
            <b>val</b>
            denotes a declaration of a read-only local variable, that is assigned an
            <a href="http://confluence.jetbrains.net/display/Kotlin/Control+structures#Controlstructures-Ifexpression">
                <b>if-expression</b>
            </a>
            . Then we use very basic
            <a href="http://confluence.jetbrains.net/display/Kotlin/Pattern+matching">pattern matching</a>
            expression.
        </text>
        <args>FR</args>
        <mode>java js</mode>
    </example>
    <example>
        <name>Use a conditional expression</name>
        <text><a href="http://confluence.jetbrains.net/display/Kotlin/Control+structures#Controlstructures-Ifexpression"><b>if</b></a> is an expression, i.e. it returns a value. Therefore there is not ternary operator (condition ? then : else), because ordinary <b>if</b> works fine in this role.
        </text>
        <args>10 20</args>
        <mode>java</mode>
    </example>
    <example>
        <name>Null-checks</name>
        <text>A reference must be explicitly marked as nullable to be able hold a null.
            See <a href="http://confluence.jetbrains.net/display/Kotlin/Null-safety">Null-safety</a>
        </text>
        <args>2 3</args>
        <mode>java</mode>
    </example>
    <example>
        <name>is-checks and smart casts</name>
        <text>The is operator checks if an expression is an instance of a type (and <a href="http://confluence.jetbrains.net/display/Kotlin/Pattern+matching">more</a>).
            If we is-checked an immutable local variable or property, there's no need to cast it explicitly to the is-checked type.
            See <a href="http://confluence.jetbrains.net/display/Kotlin/Classes+and+Inheritance">Classes and Inheritance</a>.
            See <a href="http://confluence.jetbrains.net/display/Kotlin/Type+casts">Type casts</a>.
        </text>
        <args/>
        <mode>java js</mode>
    </example>
    <example>
        <name>Use a while-loop</name>
        <text><b>While</b> and <b>do..while</b> work as usual:
            See <a href="http://confluence.jetbrains.net/display/Kotlin/Control+structures#Controlstructures-While">while-loop</a>.
        </text>
        <args>guest1 guest2 guest3 guest4</args>
        <mode>java js</mode>
    </example>
    <example>
        <name>Use a for-loop</name>
        <text>For loop iterates through anything that provides an iterator.
            See <a href="http://confluence.jetbrains.net/display/Kotlin/Control+structures#Controlstructures-For">for-loop</a>.
        </text>
        <args>guest1 guest2 guest3</args>
        <mode>java js</mode>
    </example>
    <example>
        <name>Use ranges and in</name>
        <text>Check if a number lies within a range.<br/>
            Check if a number is out of range.<br/>
            Check if a collection contains an object<br/>
            See <a href="http://confluence.jetbrains.net/display/Kotlin/Ranges">Ranges</a>
        </text>
        <args>4</args>
        <mode>java</mode>
    </example>
    <example>
        <name>Use when</name>
        <text>See <a href="http://confluence.jetbrains.net/display/Kotlin/Pattern+matching">Pattern-matching</a>
        </text>
        <args/>
        <mode>java</mode>
    </example>
    <example>
        <name>99 Bottles of Beer</name>
        <text>
            <p>
                This example implements the famous "99 Bottles of Beer" program.
                See <a href="http://99-bottles-of-beer.net/">99-bottles-of-beer.net</a>.
            </p>
            <p>
                Additionally, you can pass the desired initial number of bottles to use (rather than 99) 
                as a command-line argument.
            </p>
        </text>
        <args/>
        <mode>java</mode>
    </example>
    <example>
        <name>Maze</name>
        <text>
            <p>
                Find your way through a maze to get a prize :)
            </p>
        </text>
        <args/>
        <mode>java</mode>
    </example>
    <example>
        <name>Life</name>
        <text>
            <p>
               This is a straightforward implementation of The Game of Life
               See <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Wikipedia</a>
            </p>
        </text>
        <args/>
        <mode>java</mode>
    </example>
    <example>
        <name>HTML Builder</name>
        <text>
            <p>
This is an example of a <b>Type-Safe Groovy-style Builder</b><br/>

Builders are good for declaratively describing data in your code.
In this example we show how to describe an HTML page in Kotlin.

See <a href="http://confluence.jetbrains.net/display/Kotlin/Type-safe+Groovy-style+builders">this page</a> for details.
            </p>
        </text>
        <args/>
        <mode>java js</mode>
    </example>
    <example>
        <name>Hello, Kotlin</name>
        <text>
            <p>
                This example is just simple text floating around. If you are using chrome, there is a bug that spoil the visuals.
            </p>
        </text>
        <args/>
        <mode>canvas</mode>
    </example>
    <example>
        <name>Fancy lines</name>
        <text>
            <p>
                This example is based on <a href="http://www.w3.org/TR/2dcontext/">example</a> from html5 canvas2D docs.<br/>
                Note that only a subset of the api is supported for now.
            </p>
        </text>
        <args/>
        <mode>canvas</mode>
    </example>
    <example>
        <name>Creatures</name>
        <text>
            <p>
                In this example strange creatures are watching the kotlin logo. You can drag'n'drop them as well as the logo.
                Doubleclick to add more creatures but be careful. They may be watching you!
            </p>
        </text>
        <args/>
        <mode>canvas</mode>
    </example>
    <example>
        <name>Traffic light</name>
        <text>
            <p>
                In this example you can see a crossroads. Traffic light change color by timer, but you can change it manually using controls at the right part of screen.
            </p>
        </text>
        <args/>
        <mode>canvas</mode>
    </example>
    <example>
        <name>Multi-declarations</name>
        <text>
            <p>
                In this example introduces a concept that we call <b>mutli-declarations</b>. It creates multiple variable at once.<br/>The <b>component1()</b> and <b>component2()</b> functions are another example of principle of conventions widely used in Kotlin. Anything can be on the right-hand side of a multi-assignement, as long as the required number of component functions can be called on it.
            </p>
        </text>
        <args/>
        <mode>java</mode>
    </example>
    <example>
        <name>Data classes</name>
        <text>
            <p>
                <b>Data class</b> gets <b>component functions</b>, one for each property declared in the primary constructor, generated automatically (this is already implemented), same for all the other goodies common for data: <b>toString()</b>, <b>equals()</b> and <b>hashCode()</b> (will be there soon).
            </p>
        </text>
        <args/>
        <mode>java</mode>
    </example>

</help>
